name: "Build Kernel Boot Header v1+"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "${{ github.workspace }}/out"

on:
  watch:
    types: [started]

     
  workflow_dispatch:
    inputs:
      devicename:
          description: 'Codename Device'
          required: true
          default: 'ginkgo'
      defconfig:
          description: 'defconfig target'
          required: true
      kernelname:
          description: 'Kernel name'
          required: true
          default: 'neophyte'
      kernelversion:
          description: 'Kernel version'
          required: true
          default: 'v3.0'
      kernelvarian:
          description: 'Kernel varian'
          required: true
          default: 'Sukisu'
      kernelrepo:
          description: 'Kernel source link'
          required: true
      kernelbranch:
          description: 'Kernel source branch'
          required: true
      anykernelrepo:
          description: 'Anykernel source link'
          required: true
          default: 'https://github.com/neophyte721/AnyKernel3'
      anykernelbranch:
          description: 'Anykernel source branch'
          required: true
          default: 'master'

jobs:
  Set-repos:
    name: "Configuration CI"
    runs-on: ubuntu-22.04
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      builddate: ${{ steps.generate-builddate.outputs.builddate }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Generate CI"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat  ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: "Set builddate"
        id: generate-builddate
        run: echo "builddate=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "Build kernel"
    runs-on: ubuntu-22.04
    needs:
      - Set-repos
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      TZ: Asia/Jakarta
      DEVICE: ${{ github.event.inputs.device }}

      WORKSPACE: ${{ github.workspace }}

      builddate: "${{ needs.Set-repos.outputs.builddate }}"

      DEFCONFIG: ${{ github.event.inputs.defconfig }}
      DEVICENAME: ${{ github.event.inputs.devicename }}
      KERNELNAME: ${{ github.event.inputs.kernelname }}
      KERNELVERSION: ${{ github.event.inputs.kernelversion }}
      KERNELVARIAN: ${{ github.event.inputs.kernelvarian }}
      KERNELREPO: ${{ github.event.inputs.kernelrepo }}
      KERNELBRANCH: ${{ github.event.inputs.kernelbranch }}
      ANYKERNELREPO: ${{ github.event.inputs.anykernelrepo }}
      ANYKERNELBRANCH: ${{ github.event.inputs.anykernelbranch }}

      withKernelSU: ${{ matrix.repos.withKernelSU }}
      ccache: ${{ matrix.repos.ccache }}
      useAnykernel: ${{ matrix.repos.AnyKernel3.use }}
      release: ${{ matrix.repos.AnyKernel3.release }}
    steps:
      - name: "Install Dependency"
        run: |
          wget https://raw.githubusercontent.com/neophyte721/Android-CI/main/Common/Dependency.sh
          bash Dependency.sh

      - name: Set cache to 50G
        run: |
          export USE_CCACHE=1
          ccache -M 50G
          export CCACHE_COMPRESS=1

      - name: Set Git Config
        run: |
          wget https://raw.githubusercontent.com/neophyte721/Android-CI/main/Common/Git-Config.sh
          bash Git-Config.sh

      - name: "Setup Anykernel3"
        env:
          params: "${{ toJSON(matrix.repos.AnyKernel3) }}"
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch $ANYKERNELBRANCH $ANYKERNELREPO AnyKernel3

          echo "Setup Anykernel3 => ($ANYKERNELREPO)"

      - name: "Clone kernel source => (${{ env.KERNELREPO }})"
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch $KERNELBRANCH $KERNELREPO $KERNELNAME

          echo "Clone kernel source => ($KERNELREPO)"

      - name: "Clone Clang"
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "There is $toolchains_num defined toolchains."
          for ((i=0;i<toolchains_num;i++)); do
            toolchain_name=$(echo $toolchains | jq -r ".[$i].name")
            # Github
            toolchain_repo=$(echo $toolchains | jq -r ".[$i].repo")
            toolchain_branch=$(echo $toolchains | jq -r ".[$i].branch")
            # From archive
            toolchain_url=$(echo $toolchains | jq -r ".[$i].url")
            
            echo $toolchain_url
            if [ -z "${toolchain_url:-}" ] || [ "$toolchain_url" = "null" ];  then
              git clone --recursive --depth=1 -j $(nproc) --branch $toolchain_branch $toolchain_repo $toolchain_name
              echo "Clone $toolchain_name => ($toolchain_repo)"
            else
              wget "$toolchain_url"
              filename="${toolchain_url##*/}"
              mkdir -p $toolchain_name
              case "$filename" in
                *.zip)
                  unzip -d $toolchain_name "$filename"
                  ;;
                *.tar)
                  tar xvf "$filename" -C $toolchain_name
                  ;;
                *.tar.gz)
                  tar zxvf "$filename" -C $toolchain_name
                  ;;
                *.rar)
                  unrar x "$filename" $toolchain_name
                  ;;
                *)
                  echo "unknown file type: $filename"
                  ;;
              esac
            fi

            jq -r ".[$i].binPath[] | tostring" <<< "$toolchains" | while read -r bin_path; do
              echo "$WORKSPACE/$toolchain_name/$bin_path" >> $GITHUB_PATH
            done
          done

      - name: "Set args"
        id: generate-args
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
          THREAD: $(nproc --all)
        run: |
          echo "PATH Variable: $PATH"

          ARCH=$(echo $params | jq -r ".ARCH")
          CC=$(echo $params | jq -r ".CC")

          args="-j${{ env.THREAD }}"
          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p ${{ env.OUT_DIR }} && args="$args O=${{ env.OUT_DIR }}"
          fi
          if [ -n "$ARCH" ]; then
            args="$args ARCH=$ARCH"
          fi
          if [ -n "$CC" ]; then

            if [[ "$CC" == *"/"* ]]; then
              CC=${{ env.WORKSPACE }}/$CC
            fi

            if [ ${{ env.ccache }} = true ]; then
              args="$args CC=\"ccache $CC\""
            else
              args="$args CC=$CC"
            fi
          fi
          while read -r externalCommand; do
            key=$(echo "$externalCommand" | cut -d= -f1)
            value=$(echo "$externalCommand" | cut -d= -f2)
            if [[ "$value" == *"/"* ]]; then
              value="${{ env.WORKSPACE }}/$value"
            fi
            args="$args $key=$value"
          done < <(jq -r '.externalCommand | to_entries[] | "\(.key)=\(.value)"' <<< "$params")
        
          echo "$args"
          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "Make defconfig"
        working-directory: ${{ env.KERNELNAME }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
          arch: ${{ steps.generate-args.outputs.ARCH }}
        run: |
          echo "PATH Variable: $PATH"
          make ${{ env.args }} ${{ env.DEFCONFIG }}

      - name: dtc
        run: |
          export DTC_EXT=/usr/bin/dtc

      - name: "Build kernel"
        working-directory: ${{ env.KERNELNAME }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "PATH Variable: $PATH"
          make ${{ env.args }}

      - name: "Upload Image.gz"
        uses: actions/upload-artifact@v4
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: Image.gz{{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.KERNELVERSION }}-${{ env.KERNELVARIAN }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz
          if-no-files-found: ignore
          retention-days: 7

      - name: "Upload dtbo.img"
        uses: actions/upload-artifact@v4
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: dtbo.img-${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.KERNELVERSION }}-${{ env.KERNELVARIAN }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtbo.img
          if-no-files-found: ignore
          retention-days: 7

      - name: "Pack AnyKernel3.zip"
        if: ${{ env.useAnykernel == 'true' }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
          anykernel: "${{ env.WORKSPACE }}/${{ env.DEVICENAME }}-${{ env.KERNELNAME }}-${{ env.KERNELVERSION }}-${{ env.KERNELVARIAN }}_${{ env.builddate }}"
        run: |
          ls -al

          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz ./AnyKernel3/
          fi
          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtbo.img" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtbo.img ./AnyKernel3/
          fi
          
          cd AnyKernel3/
          zip -q -r "${{ env.anykernel }}.zip" *

      - name: "Upload AnyKernel3 image => (${{ env.builddate }})"
        uses: actions/upload-artifact@v4
        if: ${{ env.useAnykernel == 'true' }}
        with:
          name: "${{ env.DEVICENAME }}-${{ env.KERNELNAME }}-${{ env.KERNELVERSION }}-${{ env.KERNELVARIAN }}_${{ env.builddate }}"
          path: AnyKernel3/*

      - name: Create GitHub Release => (${{ env.builddate }})
        continue-on-error: true
        uses: softprops/action-gh-release@v2
        if: ${{ env.useAnykernel == 'true' && env.release == 'true' }}
        with:
          tag_name: v${{ env.builddate }}.${{ github.run_number }}
          files: "${{ env.WORKSPACE }}/${{ env.DEVICENAME }}-${{ env.KERNELNAME }}-${{ env.KERNELVERSION }}-${{ env.KERNELVARIAN }}_${{ env.builddate }}.zip"
          generate_release_notes: true
